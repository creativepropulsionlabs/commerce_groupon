<?php

/**
 * @file
 * Primary module hooks for Commerce groupon module.
 */

use Drupal\commerce_order\Adjustment;
use Drupal\commerce_order\Entity\OrderItem;
use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Component\Serialization\Json;
use Drupal\commerce_order\Entity\Order;
use Drupal\commerce_shipping\Entity\Shipment;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\physical\Weight;
use Drupal\physical\WeightUnit;
use Drupal\profile\Entity\Profile;
use GuzzleHttp\Exception\BadResponseException;
use GuzzleHttp\RequestOptions;

define('ENDPOINT', 'https://scm.commerceinterface.com/api/v4');

/**
 * To commerce weight convert helper.
 *
 * @param $name
 *   Groupon weight name.
 *
 * @return string
 *   Commerce weight.
 */
function commerce_groupon_weight_units($name) {
  $name = mb_strtolower($name);
  switch ($name) {
    case 'pounds':
      return WeightUnit::POUND;
      break;
    case 'pound':
      return WeightUnit::POUND;
      break;
    case 'kilogram':
      return WeightUnit::KILOGRAM;
      break;
    case 'kilograms':
      return WeightUnit::KILOGRAM;
      break;
    case 'gram':
      return WeightUnit::GRAM;
      break;
    case 'grams':
      return WeightUnit::GRAM;
      break;
    default:
      return WeightUnit::KILOGRAM;
      break;
  }
}

/**
 * Implements hook_cron().
 */
function commerce_groupon_cron() {
  $orders = commerce_groupon_get_orders();
  try {
    commerce_groupon_create_order($orders);
  } catch (InvalidPluginDefinitionException $e) {
  } catch (PluginNotFoundException $e) {
  } catch (EntityStorageException $e) {
  }
  $purchased_orders = commerce_groupon_get_purchased_orders();
  if (!is_null($purchased_orders)) {
    try {
      commerce_groupon_process_purchased_orders($purchased_orders);
    } catch (InvalidPluginDefinitionException $e) {
    } catch (PluginNotFoundException $e) {
    }
  }
}

/**
 * Groupon orders getter.
 *
 * @return array
 *   Groupon orders.
 */
function commerce_groupon_get_orders() {
//  $json = '{
//    "meta": {
//        "no_of_pages": 1,
//        "current_page": 1,
//        "max_items_per_page": 250,
//        "no_of_items": 1
//    },
//    "data": [{
//        "orderid": "FFB7A681BE",
//        "parent_orderid": "12345",
//        "customer": {
//            "city": "BRADFORD",
//            "state": null,
//            "name": "SOME BODY HERE",
//            "zip": "SOME ZIP",
//            "country": null,
//            "address1": "901",
//            "address2": "GREENFIELDS LANE",
//            "phone": "01234 982103"
//        },
//        "line_items": [{
//            "status": "open",
//            "weight": 0.0,
//            "bom_sku": "2xAB831337NH09",
//            "gg_account_number": "332312",
//            "opp_name": "OPPORTUNITY NAME",
//            "ci_lineitemid": 54553918,
//            "sku": "024409387203",
//            "permalink": "SOME PERMALINK",
//            "name": "SOME PACK OF 6",
//            "po_number": "SOME PO NUMER",
//            "channel_sku_provided": "a0YC000000TTsch",
//            "fulfillment_lineitem_id": "34054258",
//            "unit_price": 10.99,
//            "gift_message": "SOME GIFT MESSAGE",
//            "quantity": 1,
//            "groupon_cost" : 12.09,
//            "ship_by_date": "02/16/2015 08:10AM UTC"
//        }],
//        "shipping": {
//            "product_dimension_unit": "inches",
//            "product_weight": "1.93",
//            "product_weight_unit": "pounds",
//            "incoterms": "INCO TERMS",
//            "3PL_warehouse": "OH",
//            "3PL_name": "INNOTRAC",
//            "product_width": "1.5",
//            "product_length": "12.75",
//            "carrier": "UPS",
//            "product_height": "12.75",
//            "hts_code": "",
//            "method": "BEST"
//        },
//        "date": "01/16/2015 08:10AM UTC",
//        "amount": {
//            "total": 10.99,
//            "shipping": 0
//        },
//        "supplier": "SUPPLIER NAME",
//        "opp_id": "OPPORTUNITY ID",
//        "fulfillment_method": "FULFILLMENT METHOD"
//    }],
//    "success": true
//}';
//  $enc = Json::decode($json);
//  return $enc['data'];

  $data = (object)commerce_groupon_request('get', ENDPOINT . '/get_orders');
  \Drupal::logger('commerce_groupon_get_orders')->debug('<pre>@data</pre>', ['@data' => print_r($data,1)]);

  return $data->success == TRUE ? $data->data : [];
}

/**
 * Groupon purchased orders getter.
 *
 * @return array
 *   Groupon purchased orders.
 */
function commerce_groupon_get_purchased_orders() {
//// TODO For debug only
//  // TODO Attention 'orderid' == 'po_number' - for $order
//  $json = '{
//    "po_details": [
//      {
//        "supplier": "3pl excel",
//        "po_number": "FFB7A681BE",
//        "po_created_on": "SOME DATE",
//        "permalink": "SOME PERMALINK",
//        "fulfillment_provider": "SOME FULFILLMENT PROVIDER",
//        "po_upc_list": [
//          {
//            "upc": "UPC1",
//            "received_quantity": "100",
//            "total_quantity": "300",
//            "expected_quantity": "200",
//            "total_weight": "0.0",
//	          "weight_unit": "pounds"
//          }
//        ]
//      }
//    ],
//    "success": true
//  }';
//
//  // TODO For debug only
//  $data = Json::decode($json);
//  return $data['success'] == TRUE ? $data['po_details'] : [];

  // TODO end debug - delete it after!

  $data = (object)commerce_groupon_request('get', ENDPOINT . '/purchase_orders');
  if (isset($data->po_details)) {
    $data_key = 'po_details';
  }
  if (isset($data->data)) {
    $data_key = 'data';
  }
  return $data->success == TRUE ? $data->{$data_key} : [];
}

/**
 * Create commerce orders.
 *
 * @param array $groupon_orders
 *   Groupon orders.
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function commerce_groupon_create_order(array $groupon_orders) {
  if (empty($groupon_orders)) {
    return;
  }
  $exported_line_items = [];

  /** @var \Drupal\commerce_store\Entity\StoreInterface $current_store */
  $current_store = \Drupal::service('commerce_store.current_store')->getStore();
  $lang_code = $current_store->language()->getId();
  $currency_code = $current_store->getDefaultCurrencyCode();
  $config = \Drupal::config('commerce_groupon.settings');
  $current_order_type = \Drupal::entityTypeManager()->getStorage('commerce_order_type')->load($config->get('order_type'));
  $checkout_flow = $current_order_type->getThirdPartySettings('commerce_checkout')['checkout_flow'];
  /** @var \Drupal\commerce_groupon\CommerceGrouponShippingMapperManagerInterface $shipping_mapper */
  $shipping_mapper = \Drupal::service('commerce_groupon_shipping_mapper.manager');
  $order_storage = \Drupal::entityTypeManager()->getStorage('commerce_order');
  foreach ($groupon_orders as $groupon_order) {
    $orders = $order_storage->loadByProperties(['order_number' => $groupon_order['orderid']]);
    if (!empty($orders)) {
      // Skip order which was previously created.
      continue;
    }
    // Create product variations.
    $order_items = [];
    $shipping_items = [];
    foreach ($groupon_order['line_items'] as $line_item) {
      $variation_storage = \Drupal::entityTypeManager()->getStorage('commerce_product_variation');
      $variations = $variation_storage->loadByProperties(['sku' => $line_item["sku"]]);
      if (empty($variations)) {
        $variations = $variation_storage->loadByProperties(['sku' => $line_item["sku"]]);
        if (empty($variations)) {
          // Skip order if we can't map at least one line_item.
          $bypass_order_creation = TRUE;
          break;
        }
      }

      $variation = reset($variations);

      // Create order items.
      $order_item = OrderItem::create([
        'type' => 'default',
        'title' => $line_item['name'],
        'purchased_entity' => $variation,
        'quantity' => $line_item['quantity'],
        'unit_price' => $variation->getPrice(),
      ]);
      $order_item->setData('ci_lineitemid', (string)$line_item['ci_lineitemid']);
      $order_item->setData('po_number', (string)$groupon_order['parent_orderid']);
      $order_item->setData('groupon_raw', Json::encode($line_item));
      $order_item->save();
      $order_items[] = $order_item;
      $shipping_item = $shipping_mapper->getShippingItem($order_item, $line_item, $groupon_order);
      $shipping_items[] = $shipping_item;
    }

    if (!empty($bypass_order_creation)) {
      continue;
    }

    // @todo create local order.
    // Create the billing profile.
    /** @var \Drupal\profile\Entity\ProfileInterface $billing_profile */
    $billing_profile = Profile::create([
      'type' => 'customer',
      'address' => [
        'given_name' => $groupon_order['customer']['name'],
        'family_name' => $groupon_order['customer']['name'],
        'address_line1' => $groupon_order['customer']['address1'],
        'address_line2' => $groupon_order['customer']['address2'],
        'administrative_area' => $groupon_order["customer"]["state"],
        'postal_code' => mb_substr($groupon_order['customer']['zip'], 0, 5),
        'locality' => $groupon_order['customer']['city'],
        'country_code' => $groupon_order["customer"]["country"],
        'langcode' => $lang_code,
      ],
    ]);
    if ($billing_profile->hasField('field_phone_number')) {
      $phone = $groupon_order['customer']['phone'] ? $groupon_order['customer']['phone'] :'555-555-5555';
      $billing_profile->set('field_phone_number', $phone);
    }
    $billing_profile->save();
    // Create order.
    /** @var \Drupal\commerce_order\Entity\Order $order */
    $order = Order::create([
      'type' => $current_order_type->id(),
      // TODO check this fields - 'checkout_flow' 'checkout_step' should be dinamic
      'checkout_flow' => $checkout_flow,
      'checkout_step' => 'complete',
      'state' => 'draft',
      'order_number' => $groupon_order['orderid'],
      'billing_profile' => $billing_profile,
      'store_id' => $current_store->id(),
      'order_items' => $order_items,
    ]);
    $users = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties([
      'name' => 'groupon',
    ]);
    if (!empty($users)) {
      $groupon_user = reset($users);
    }
    $order->setCustomer($groupon_user);
    $order->setData('groupon_raw', Json::encode($groupon_order));
    $order->save();
    $shipment = $shipping_mapper->getShipment($order, $groupon_order);
    $shipment->save();
    $order->set('shipments', $shipment);
    $order->addAdjustment(new Adjustment([
      'type' => 'shipping',
      'label' => t('Shipping'),
      'amount' => $shipment->getAmount(),
      'source_id' => $shipment->id(),
    ]));
    $order->save();

    $transition = $order->getState()->getTransitions();
    $order->getState()->applyTransition($transition['place']);
    $order->save();

    foreach ($groupon_order['line_items'] as $line_item) {
      $exported_line_items[] = $line_item['ci_lineitemid'];
    }
    try {
      commerce_groupon_mark_exported($exported_line_items);
    }
    catch (Exception $e) {
      \Drupal::logger('commerce_groupon')->debug('The following line items are not marked as exported <pre>@data</pre>', [
        '@data' => print_r($exported_line_items,1)
      ]);
    }
  }

}

/**
 * Set groupon line items as exported.
 *
 * @param array $line_items
 *   Line Items
 *
 * @throws \Exception
 */
function commerce_groupon_mark_exported($line_items = []) {
  $post_data = [
    'ci_lineitem_ids' => Json::encode($line_items),
  ];
  $data = (object)commerce_groupon_request('post', ENDPOINT . '/mark_exported', $post_data);
  if ($data->success != TRUE) {
  // TODO check $data->success ???? should be object  ????
//  if ($data['success'] != TRUE) {
    throw new \Exception();
  }
}

/**
 * Groupon service call wrapper.
 *
 * @param string $method
 *   POST or GET
 * @param $url
 *   Called endpoint Url
 * @param array $data
 *   Post data
 *
 * @return mixed
 *   Result of call
 */
function commerce_groupon_request($method, $url, $data = []) {
  $callback = "commerce_groupon_request_$method";
  if (is_callable($callback)) {
    try {
      return $callback($url, $data);
    }
    catch (Exception $exception) {
      $response = JSON::decode((string)$exception->getResponse()->getBody());

      \Drupal::logger('commerce_groupon_post')->debug('<pre>@data</pre>', ['@data' => print_r($response,1)]);
      return $response;
    }
  }
}

/**
 * Groupon service post worker.
 *
 * @param $url
 *   Called endpoint Url
 * @param array $data
 *   Post data
 *
 * @return mixed
 *   Result of call
 */
function commerce_groupon_request_post($url, $data) {
  $config = \Drupal::config('commerce_groupon.settings');
  $post_data = [
      'supplier_id' => $config->get('supplier_id'),
      'token' => $config->get('token'),
    ] + $data ;

  //  // TODO for debug
//  $response = '{
//    "success": true
//  }';
//  return Json::decode($response);
//  // TODO end debug - delete it!

  $request_options[RequestOptions::FORM_PARAMS] = $post_data;
  $request_options[RequestOptions::HEADERS] = [
    'cache-control' => 'no-cache',
    'Cache-Control' => 'no-cache',
  ];
  $response = \Drupal::httpClient()->post($url, $request_options);

  \Drupal::logger('commerce_groupon_post')->debug($response->getBody()->getContents());
  if (200 != $response->getStatusCode()) {
    throw new BadResponseException(strip_tags(''), $response->getStatusCode());
  }
  \Drupal::logger('commerce_groupon')->debug((string)$response->getBody());
  $contents = (string)$response->getBody();
  $data = Json::decode($contents);
  \Drupal::logger('commerce_groupon')->debug('<pre>@data</pre>', ['@data' => print_r($data, 1)]);

  if (empty($data)) {
    $data = new \stdClass();
    $data->success = FALSE;
  }
  return $data;
}

/**
 * Groupon service get worker.
 *
 * @param $url
 *   Called endpoint Url
 *
 * @return mixed
 *   Result of call
 */
function commerce_groupon_request_get($url) {
  \Drupal::logger('commerce_groupon_request_get')->debug('<pre>@data</pre>', ['@data' => print_r($url,1)]);

  $config = \Drupal::config('commerce_groupon.settings');
  $options = ['query' => [
    'supplier_id' => $config->get('supplier_id'),
    'token' => $config->get('token'),
  ]];
  if ($config->get('debug', 0) && $url == 'https://scm.commerceinterface.com/api/v4/get_orders') {
    $options['query']['start_datetime'] = $config->get('start_datetime', '09/06/2019 00:00');
    $options['query']['end_datetime'] = $config->get('end_datetime', '09/06/2019 23:59');
  }

  \Drupal::logger('commerce_groupon_request_get')->debug('<pre>@data</pre>', ['@data' => print_r($options,1)]);

  $response = \Drupal::httpClient()->get($url, $options);
  \Drupal::logger('commerce_groupon_get')->debug('<pre>@data</pre>', ['@data' => print_r((string)$response->getBody(),1)]);

  if (200 != $response->getStatusCode()) {
    throw new BadResponseException(strip_tags(''), $response->getStatusCode());
  }
  $contents = (string) $response->getBody();
  $data = Json::decode($contents);
  if (empty($data)) {
    $data = new \stdClass();
    $data->success = FALSE;
  }
  return $data;
}

/**
 * Groupon purchased orders processor.
 *
 * @param array $purchased_orders
 *   Groupon purchased orders.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function commerce_groupon_process_purchased_orders(array $purchased_orders) {
  if (empty($purchased_orders)) {
    return;
  }
  foreach ($purchased_orders as $purchased_order) {
    /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
    $order = \Drupal::entityTypeManager()
      ->getStorage('commerce_order')
      ->loadByProperties([
        'order_number' => $purchased_order['po_number']
      ]);
    $order = array_pop($order);

    $shipments = $order->get('shipments')->getValue();
    $commerce_shipment_storage = \Drupal::entityTypeManager()->getStorage('commerce_shipment');

    foreach ($shipments as $shipment) {
      /** @var Shipment $shipment_entity */
      $shipment_entity = $commerce_shipment_storage->load($shipment['target_id']);
      //TODO check array $purchased_order['po_upc_list'] !
      $weight_unit = commerce_groupon_weight_units($purchased_order['po_upc_list'][0]['weight_unit']);
      $weight = new Weight((string)$purchased_order['po_upc_list'][0]['total_weight'], $weight_unit);
      $shipment_entity->setWeight($weight);
    }

    // TODO process it
    $post_data = [
      'po_number' => Json::encode($purchased_order['po_number']),
    ];

    $data = commerce_groupon_request('post', ENDPOINT . '/purchase_orders/acknowledgement', $post_data);
//    commerce_groupon_mark_purchase_order_acknowledged($post_data);
  }
}

/**
 * Implements hook_ENTITY_TYPR_presave().
 */
function commerce_groupon_commerce_shipment_presave(Shipment $shipment) {
  /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
  $order = $shipment->getOrder();
  $users = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties([
    'name' => 'groupon',
  ]);
  if (!empty($users)) {
    $groupon_user = reset($users);
  }
  if ($order->getCustomerId() != $groupon_user->id()) {
    return;
  }
  $tracking_code = $shipment->getTrackingCode();
  if (empty($tracking_code)) {
    // @todo add custom field as source of tracking_code?
    if ($shipment->hasField('field_tracking_codes')) {
      $tracking_code = $shipment->get('field_tracking_codes')->value;
    }
  }
  // Send tracking notification.
  // TODO TRUE || for debug!! Delete it
  if (!empty($tracking_code)) {
    $line_items = [];
    $groupon_response = json_decode($order->getData('groupon_raw'));
    /** @var \Drupal\commerce_groupon\CommerceGrouponShippingMapperManagerInterface $shipping_mapper */
    $shipping_mapper = \Drupal::service('commerce_groupon_shipping_mapper.manager');

    /** @var \Drupal\commerce_order\Entity\OrderItemInterface $item */
    foreach ($order->getItems() as $item) {
      $line_items[] = [
        // TODO check "quantity" later - see service documentation
//        "quantity" => $item->getQuantity(),
        'carrier' => $shipping_mapper->getCarrier($order),
//      $groupon_response->shipping->carrier,
        'ci_lineitem_id' => $item->getData('ci_lineitemid'),
        'tracking' => $tracking_code,
        ];
    }

    $post_data = [
      'tracking_info' => Json::encode($line_items)
    ];
    $data = commerce_groupon_request('post', ENDPOINT . '/tracking_notification', $post_data);
  }
}

function commerce_groupon_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'commerce_shipping_method') {
    $fields = [];
    $fields['groupon_shipping'] = BaseFieldDefinition::create('commerce_plugin_item:commerce_groupon_shipping_mapper')
      ->setLabel(t('Groupon shipping'))
      ->setCardinality(1)
      ->setRequired(FALSE)
      ->setDisplayOptions('form', [
        'type' => 'commerce_plugin_select',
        'weight' => 3,
      ]);
    return $fields;
  }
  if ($entity_type->id() === 'commerce_product_variation') {
    $fields = [];
    $fields['groupon_upc'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Groupon UPC'))
      ->setDescription(t('The unique Groupon Universal Product Code.'))
      ->setRequired(FALSE)
      ->addConstraint('ProductVariationUpc')
      ->setSetting('display_description', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => -4,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);
    return $fields;
  }
}
